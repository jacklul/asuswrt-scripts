#!/bin/sh
# Made by Jack'lul <jacklul.github.io>
#
# This script will be executed by the router on mount/unmount event
# It will first look for the script to execute in script_usbmount/script_usbumount NVRAM variable
# Then it will look for usb-mount-script/usb-umount-script script in /jffs/scripts
# It will launch /jffs/scripts-startup.sh if none of the above are available
#
# Receiving 'stop' here is unlikely, possibly only when unmounting from the web UI
#

command="/jffs/scripts-startup.sh start" # https://github.com/jacklul/asuswrt-scripts startup script by default
tag="$(basename "$0")"

case "$1" in
    "start")
        nvram_script="$(nvram get script_usbmount)"

        if [ -n "$nvram_script" ]; then
            logger -t "$tag" "Executing command: $nvram_script"
            eval "$nvram_script"
        else
            if [ -x /jffs/scripts/usb-mount-script ]; then
                command=/jffs/scripts/usb-mount-script
            fi

            if [ -x "$command" ]; then
                logger -t "$tag" "Executing command: $command"
                eval "$command"
            fi
        fi

        # This allows the USB drive to be unplugged and then plugged back in and retriggering this script again,
        # without this router will not call this script ever again until a reboot.
        # "USB Application" in the web UI will also be stuck on "apps installing" without this fix.
        {
            sleep 15
            nvram set apps_state_autorun=
            nvram set apps_state_install=
            nvram set apps_state_remove=
            nvram set apps_state_switch=
            nvram set apps_state_stop=
            nvram set apps_state_enable=
            nvram set apps_state_update=
            nvram set apps_state_upgrade=
            nvram set apps_state_cancel=
            nvram set apps_state_error=
            nvram set apps_state_action=
            nvram set apps_mounted_path=
            nvram set apps_dev=
            # nvram commit not needed!
        } >/dev/null 2>&1 &
    ;;
    "stop")
        nvram_script="$(nvram get script_usbumount)"

        if [ -n "$nvram_script" ]; then
            logger -t "$tag" "Executing command: $nvram_script"
            eval "$nvram_script"
        else
            if [ -x /jffs/scripts/usb-umount-script ]; then
                command=/jffs/scripts/usb-umount-script
            fi

            if [ -x "$command" ]; then
                logger -t "$tag" "Executing command: $command"
                eval "$command"
            fi
        fi
    ;;
esac
