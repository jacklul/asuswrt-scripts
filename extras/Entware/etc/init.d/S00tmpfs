#!/bin/sh
# /opt/etc/init.d/S00tmpfs
# This script mounts the specified directories to temporary directories
# to prevent unnecessary writes to the Entware storage device.

mounts="/opt/var/lock /opt/var/log /opt/var/run" # Space separated list of directories to mount
tmpfs_dir=/tmp/entware-tmpfs # Temporary directory to mount the directories to
copy_stat=false # Copy permissions and ownership from the original directory? Requires 'stat' command

##################################################

#shellcheck disable=SC2155
readonly config="/opt/etc/init.d/$(basename "$0").conf"
if [ -f "$config" ]; then
    #shellcheck disable=SC1090
    . "$config"
fi

case $1 in
    start|restart|reconfigure)
        tag="$(basename "$0")"

        [ ! -d "$tmpfs_dir" ] && mkdir -m 755 "$tmpfs_dir"

        for mount in $mounts; do
            if ! mount | grep -Fq "on $mount type"; then
                path="${mount#/opt/}"

                #shellcheck disable=SC2174
                mkdir -pm 755 "$tmpfs_dir/$path"

                # if stat command is available, use it to copy the permissions and ownership
                if [ -x /opt/bin/stat ] && [ "$copy_stat" = true ]; then
                    IFS=" " read -r perms owner group <<EOF
$(stat -c "%a %u %g" "$mount")
EOF

                    chmod "$perms" "$tmpfs_dir/$path"
                    chown "$owner:$group" "$tmpfs_dir/$path"
                else # otherwise apply root ownership
                    chown 0:0 "$tmpfs_dir/$path"
                fi

                if mount -o bind "$tmpfs_dir/$path" "$mount"; then
                    logger -st "$tag" "Mounted $tmpfs_dir/$path on $mount"
                else
                    logger -st "$tag" "Failed to mount $tmpfs_dir/$path on $mount"
                fi
            fi
        done
    ;;
    stop|kill)
        for mount in $mounts; do
            if mount | grep -Fq "on $mount type"; then
                if umount "$mount"; then
                    echo "Unmounted $mount"
                else
                    echo "Failed to unmount $mount"
                fi
            fi
        done
    ;;
    check)
        for mount in $mounts; do
            if ! mount | grep -Fq "on $mount type"; then
                echo "Mount $mount is missing"
                echo "dead"
                exit 1
            fi
        done

        echo "alive"
    ;;
esac
