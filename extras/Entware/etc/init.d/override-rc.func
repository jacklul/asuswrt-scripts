#!/usr/bin/env bash
# /opt/etc/init.d/override-rc.func
#
# This script allows your overrides (see S00overrides) to easily change
# init.d variables like ENABLED, ARGS or PREARGS.
# This script requires procps-ng-ps package to be installed to function.
#
# A better alternative to using override-SXXdaemon is hook-SXXdaemon which
# will make the overrides continue to work even after daemon package is updated.
#
# You can use override_before() and override_after() hook functions to run
# before and after original rc.func code.
#
# You can set few additional settings in the overrides:
#  NICE=       - see renice(8) - set priority of the processes, negative values is higher priority, positive is lower, 0 is default
#  IOCLASS=    - see ionice(1) - IO class of the process, 0 for none - based on nice (default), 1 for real-time, 2 for best-effort, 3 for idle
#  IOPRIORITY= - see ionice(1) - IO priority of the process, (high) 0-7 (low) for real-time and best-effort only
#  AFFINITY=   - see taskset(1) - set a process's CPU affinity, negative values substract from the init process's affinity
#  UMASK=      - see umask(2) - set file mode creation mask before starting the process, not all programs will inherit it
#
# The value of AFFINITY should be hexadecimal accepted by the taskset command, when using
# substraction it must be decimal instead (e.g. to substract 5th core you would set 16)

#shellcheck disable=SC2034

# Fail if original rc.func is not found
_rcfunc_original="/opt/etc/init.d/rc.func.old"
[ ! -f "$_rcfunc_original" ] && { echo "Not found: $_rcfunc_original" >&2; exit 1; }

# Define hook functions
override_before() { return; }
override_after() { return; }

# Allow setting default values for extra settings through a config file
_rcfunc_config="/opt/etc/init.d/rc.func.conf"
if [ -f "$_rcfunc_config" ]; then
    # Backup current values
    _rcfunc_enabled="$ENABLED"
    _rcfunc_critical="$CRITICAL"
    _rcfunc_procs="$PROCS"
    _rcfunc_args="$ARGS"
    _rcfunc_preargs="$PREARGS"
    _rcfunc_desc="$DESC"
    _rcfunc_precmd="$PRECMD"
    _rcfunc_postcmd="$POSTCMD"
    _rcfunc_nice="$NICE"
    _rcfunc_ioclass="$IOCLASS"
    _rcfunc_iopriority="$IOPRIO"
    _rcfunc_affinity="$AFFINITY"
    _rcfunc_umask="$UMASK"

    #shellcheck disable=SC1090
    . "$_rcfunc_config"

    # Restore non-empty values
    [ -n "$_rcfunc_enabled" ] && ENABLED="$_rcfunc_enabled"
    [ -n "$_rcfunc_critical" ] && CRITICAL="$_rcfunc_critical"
    [ -n "$_rcfunc_procs" ] && PROCS="$_rcfunc_procs"
    [ -n "$_rcfunc_args" ] && ARGS="$_rcfunc_args"
    [ -n "$_rcfunc_preargs" ] && PREARGS="$_rcfunc_preargs"
    [ -n "$_rcfunc_desc" ] && DESC="$_rcfunc_desc"
    [ -n "$_rcfunc_precmd" ] && PRECMD="$_rcfunc_precmd"
    [ -n "$_rcfunc_postcmd" ] && POSTCMD="$_rcfunc_postcmd"
    [ -n "$_rcfunc_nice" ] && NICE="$_rcfunc_nice"
    [ -n "$_rcfunc_ioclass" ] && IOCLASS="$_rcfunc_ioclass"
    [ -n "$_rcfunc_iopriority" ] && IOPRIO="$_rcfunc_iopriority"
    [ -n "$_rcfunc_affinity" ] && AFFINITY="$_rcfunc_affinity"
    [ -n "$_rcfunc_umask" ] && UMASK="$_rcfunc_umask"

    unset _rcfunc_enabled _rcfunc_critical _rcfunc_procs _rcfunc_args _rcfunc_preargs _rcfunc_desc _rcfunc_precmd _rcfunc_postcmd _rcfunc_nice _rcfunc_ioclass _rcfunc_iopriority _rcfunc_affinity _rcfunc_umask
fi

# Source hook file if it exists
_rcfunc_override="/opt/etc/init.d/hook-$(basename "$0")"
if [ -f "$_rcfunc_override" ]; then
    #shellcheck disable=SC1090
    . "$_rcfunc_override"
fi

# Override or modify the variables (for use with override-SXXdaemon method)
for var in ENABLED CRITICAL PROCS ARGS PREARGS DESC PRECMD POSTCMD; do
    eval "_override=\${OVERRIDE_$var}"
    eval "_append=\${APPEND_$var}"
    eval "_prepend=\${PREPEND_$var}"

    if [ -n "$_override" ]; then
        eval "$var=\"$_override\""
    else
        if [ -n "$_append" ]; then
            eval "$var=\"\$$var $_append\""
        fi

        if [ -n "$_prepend" ]; then
            eval "$var=\"$_prepend \$$var\""
        fi
    fi
done
unset _override _append _prepend

# Show all values for debugging purposes
if [ -n "$OVERRIDE_RCFUNC_TEST" ]; then
    echo "ENABLED = $ENABLED"
    echo "CRITICAL = $CRITICAL"
    echo "PROCS = $PROCS"
    echo "ARGS = $ARGS"
    echo "PREARGS = $PREARGS"
    echo "DESC = $DESC"
    echo "PRECMD = $PRECMD"
    echo "POSTCMD = $POSTCMD"
    echo "NICE = $NICE"
    echo "IOCLASS = $IOCLASS"
    echo "IOPRIO = $IOPRIO"
    echo "AFFINITY = $AFFINITY"
    echo "UMASK = $UMASK"
    exit
fi

# Prioritize /opt binaries from this point
PATH="/opt/sbin:/opt/bin:$PATH"

_rcfunc_can_renice=true
_rcfunc_can_ionice=true
_rcfunc_can_affinity=true

[ -x /opt/bin/ps ] || { echo "Please install 'procps-ng-ps' package!" >&2; _rcfunc_can_renice=false; }
which renice >/dev/null 2>&1 || { echo "Command 'renice' not found!" >&2; _rcfunc_can_renice=false; }
which ionice >/dev/null 2>&1 || { echo "Command 'ionice' not found!" >&2; _rcfunc_can_ionice=false; }
which taskset >/dev/null 2>&1 || { echo "Command 'taskset' not found!" >&2; _rcfunc_can_affinity=false; }

# Apply those only when starting or restarting
if [ "$1" = "start" ] || [ "$1" = "restart" ]; then
    # Handle negative AFFINITY setting
    if [ "$_rcfunc_can_affinity" = true ] && echo "$AFFINITY" | grep -q '^-[0-9]\+$' && [ "$AFFINITY" -lt 0 ]; then
        init_affinity="$(taskset -p 1 | sed 's/.*: //')"

        # Convert to decimal
        init_affinity=$((0x$init_affinity))

        # Make sure variable holds only numbers
        if echo "$init_affinity" | grep -q '^[0-9]\+$'; then

            # Convert to absolute value
            AFFINITY=${AFFINITY#-}

            # Substract the value 
            AFFINITY=$((init_affinity - AFFINITY))

            if [ "$AFFINITY" -ge 1 ]; then
                # Convert to hexadecimal
                AFFINITY=$(printf '%x\n' "$AFFINITY")
            else # Values below 1 are invalid
                echo "Invalid value for CPU affinity: $AFFINITY" >&2
                AFFINITY=
            fi
        else
            echo "Failed to get CPU affinity of the init process (PID 1)" >&2
            AFFINITY=
        fi
    fi

    # Apply priority
    if [ "$_rcfunc_can_renice" = true ] && [ -n "$NICE" ]; then
        if renice -n "$NICE" -p $$ > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set niceness to $NICE"
        else
            echo "Failed to set niceness to $NICE" >&2
        fi
    fi

    # Apply IO class and priority
    if [ "$_rcfunc_can_ionice" = true ]; then
        if [ -n "$IOCLASS" ]; then
            if ionice -c "$IOCLASS" -p $$ > /dev/null; then
                [ -n "$VERBOSE" ] && echo "Set IO class to $IOCLASS"
            else
                echo "Failed to set IO class to $IOCLASS" >&2
            fi
        fi

        if [ -n "$IOPRIORITY" ]; then
            if ionice -n "$IOPRIORITY" -p $$ > /dev/null; then
                [ -n "$VERBOSE" ] && echo "Set IO priority to $IOPRIORITY"
            else
                echo "Failed to set IO priority to $IOPRIORITY" >&2
            fi
        fi
    fi

    # Apply CPU affinity
    if [ "$_rcfunc_can_affinity" = true ] && [ -n "$AFFINITY" ]; then
        if taskset -p "$AFFINITY" $$ > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set CPU affinity to $AFFINITY"
        else
            echo "Failed to set CPU affinity to $AFFINITY" >&2
        fi
    fi

    # Apply file creation mask
    if [ -n "$UMASK" ]; then
        if umask "$UMASK" > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set umask to $UMASK"
        else
            echo "Failed to set umask to $UMASK" >&2
        fi
    fi
fi

# Store current arguments
ACTION="$1"
CALLER="$2"

# Make sure CALLER is not empty - fixes empty value in "Started xxx from ." message in syslog
[ -z "$CALLER" ] && CALLER=unknown  

override_before "$ACTION" "$CALLER"

# Override positional arguments and call the original script
set -- "$ACTION" "$CALLER"
#shellcheck disable=SC1090
. "$_rcfunc_original"

override_after "$ACTION" "$CALLER"
