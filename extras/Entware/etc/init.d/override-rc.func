#!/bin/sh
# /opt/etc/init.d/override-rc.func
# This script allows your overrides (see S00overrides) to easily change
# init.d variables like ENABLED, ARGS or PREARGS.
# This script requires procps-ng-ps package to be installed.
#
# Additionally it allows you to set few additional settings in the overrides:
#  NICE=      - niceness of the process
#  AFFINITY=  - CPU affinity of the process, negative values mean to substract from the value of the init process
#  UMASK=     - umask that will be set before starting the process, not all programs will inherit it
#
# The value of AFFINITY should be hexadecimal accepted by the taskset command,
# when using substraction it must be decimal instead (e.g. to substract 5th core you would set 16)

#shellcheck disable=SC2034

# Fail if original rc.func is not found
original="/opt/etc/init.d/rc.func.old"
[ ! -f "$original" ] && { echo "Not found: $original"; exit 1; }

# Allow setting default values for extra settings through a config file
if [ -f /opt/etc/init.d/rc.func.conf ]; then
    # Store current values before loading config
    _nice="$NICE"
    _affinity="$AFFINITY"
    _umask="$UMASK"

    #shellcheck disable=SC1091
    . /opt/etc/init.d/rc.func.conf

    # Restore non-empty values
    [ -n "$_nice" ] && NICE="$_nice"
    [ -n "$_affinity" ] && AFFINITY="$_affinity"
    [ -n "$_umask" ] && UMASK="$_umask"
    unset _nice _affinity _umask
fi

# Override variables
[ -n "$NEW_ENABLED" ] && ENABLED="$NEW_ENABLED"
[ -n "$NEW_CRITICAL" ] && CRITICAL="$NEW_CRITICAL"
[ -n "$NEW_PROCS" ] && PROCS="$NEW_PROCS"
[ -n "$NEW_ARGS" ] && ARGS="$NEW_ARGS"
[ -n "$NEW_PREARGS" ] && PREARGS="$NEW_PREARGS"
[ -n "$NEW_DESC" ] && DESC="$NEW_DESC"
[ -n "$NEW_PRECMD" ] && PRECMD="$NEW_PRECMD"
[ -n "$NEW_POSTCMD" ] && POSTCMD="$NEW_POSTCMD"

# Handle negative AFFINITY setting
if echo "$AFFINITY" | grep -q '^-[0-9]\+$' && [ "$AFFINITY" -lt 0 ]; then
    init_affinity="$(taskset -p 1 | sed 's/.*: //')"

    # Convert to decimal
    init_affinity=$((0x$init_affinity))

    # Make sure variable holds only numbers
    if echo "$init_affinity" | grep -q '^[0-9]\+$'; then
        # Convert to absolute value
        AFFINITY=${AFFINITY#-}

        # Substract the value 
        AFFINITY=$((init_affinity - AFFINITY))

        if [ "$AFFINITY" -ge 1 ]; then
            # Convert to hexadecimal
            AFFINITY=$(printf '%x\n' "$AFFINITY")
        else # Values below 1 are invalid
            echo "Invalid value for CPU affinity: $AFFINITY" >&2
            AFFINITY=
        fi
    else
        echo "Failed to get CPU affinity of the init process (PID 1)" >&2
        AFFINITY=
    fi
fi

# Apply niceness
if [ -n "$NICE" ]; then
    pid_nice="$(ps -p $$ -o ni | tail -n 1 | sed 's/ //g' | grep -E '^[0-9]+$')"
    [ "$pid_nice" -ne "$NICE" ] && renice -n "$NICE" -p $$ > /dev/null && echo "Set niceness to $NICE"
fi

# Apply CPU affinity
if [ -n "$AFFINITY" ]; then
    pid_affinity="$(taskset -p $$ | sed 's/.*: //' | sed 's/ //g' | grep -E '^[0-9]+$')"
    [ "$pid_affinity" -ne "$AFFINITY" ] && taskset -p "$AFFINITY" $$ > /dev/null && echo "Set CPU affinity to $AFFINITY"
fi

# Apply umask
if [ -n "$UMASK" ]; then
    pid_umask="$(cat /proc/$$/status | grep Umask | awk '{print $2}')"
    [ "$pid_umask" -ne "$UMASK" ] && umask "$UMASK" > /dev/null && echo "Set umask to $UMASK"
fi

# Make sure CALLER is not empty - fixes empty value in "Started xxx from ." message in syslog
CALLER="$2"
[ -z "$CALLER" ] && CALLER=unknown  

# Override positional arguments and call the original script
set -- "$1" "$CALLER"
#shellcheck disable=SC1090
. "$original"
