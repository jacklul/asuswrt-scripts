#!/bin/sh
# /opt/etc/init.d/override-rc.func
# This script allows your overrides (see S00overrides) to easily change
# init.d variables like ENABLED, ARGS or PREARGS.
# This script requires procps-ng-ps package to be installed.
#
# Additionally it allows you to set few additional settings in the overrides:
#  NICE=       - see renice(8) - set priority of the processes, negative values is higher priority, positive is lower, 0 is default
#  IOCLASS=    - see ionice(1) - IO class of the process, 0 for none - based on nice (default), 1 for real-time, 2 for best-effort, 3 for idle
#  IOPRIORITY= - see ionice(1) - IO priority of the process, (high) 0-7 (low) for real-time and best-effort only
#  AFFINITY=   - see taskset(1) - set a process's CPU affinity, negative values substract from the init process's affinity
#  UMASK=      - see umask(2) - set file mode creation mask before starting the process, not all programs will inherit it
#
# The value of AFFINITY should be hexadecimal accepted by the taskset command,
# when using substraction it must be decimal instead (e.g. to substract 5th core you would set 16)

#shellcheck disable=SC2034

# Fail if original rc.func is not found
original="/opt/etc/init.d/rc.func.old"
[ ! -f "$original" ] && { echo "Not found: $original" >&2; exit 1; }

# Allow setting default values for extra settings through a config file
if [ -f /opt/etc/init.d/rc.func.conf ]; then
    # Store current values before loading config
    _nice="$NICE"
    _ioclass="$IOCLASS"
    _iopriority="$IOPRIO"
    _affinity="$AFFINITY"
    _umask="$UMASK"

    #shellcheck disable=SC1091
    . /opt/etc/init.d/rc.func.conf

    # Restore non-empty values
    [ -n "$_nice" ] && NICE="$_nice"
    [ -n "$_ioclass" ] && IOCLASS="$_ioclass"
    [ -n "$_iopriority" ] && IOPRIO="$_iopriority"
    [ -n "$_affinity" ] && AFFINITY="$_affinity"
    [ -n "$_umask" ] && UMASK="$_umask"
    unset _nice _affinity _umask
fi

# Override or modify the variables
for var in ENABLED CRITICAL PROCS ARGS PREARGS DESC PRECMD POSTCMD; do
    eval "_override=\${OVERRIDE_$var}"
    eval "_append=\${APPEND_$var}"
    eval "_prepend=\${PREPEND_$var}"

    if [ -n "$_override" ]; then
        eval "$var=\"$_override\""
    else
        if [ -n "$_append" ]; then
            eval "$var=\"\$$var $_append\""
        fi

        if [ -n "$_prepend" ]; then
            eval "$var=\"$_prepend \$$var\""
        fi
    fi
done
unset _override _append _prepend

if [ -n "$OVERRIDE_RCFUNC_TEST" ]; then
    echo "ENABLED = $ENABLED"
    echo "CRITICAL = $CRITICAL"
    echo "PROCS = $PROCS"
    echo "ARGS = $ARGS"
    echo "PREARGS = $PREARGS"
    echo "DESC = $DESC"
    echo "PRECMD = $PRECMD"
    echo "POSTCMD = $POSTCMD"
    exit
fi

PATH="/opt/sbin:/opt/bin:$PATH"

can_renice=true
can_ionice=true
can_affinity=true

[ -x /opt/bin/ps ] || { echo "Please install 'procps-ng-ps' package!" >&2; can_renice=false; }
which renice >/dev/null || { echo "Command 'renice' not found!" >&2; can_renice=false; }
which ionice >/dev/null || { echo "Command 'ionice' not found!" >&2; can_ionice=false; }
which taskset >/dev/null || { echo "Command 'taskset' not found!" >&2; can_affinity=false; }

# Apply those only when starting or restarting
if [ "$1" = "start" ] || [ "$1" = "restart" ]; then
    # Handle negative AFFINITY setting
    if [ "$can_affinity" = true ] && echo "$AFFINITY" | grep -q '^-[0-9]\+$' && [ "$AFFINITY" -lt 0 ]; then
        init_affinity="$(taskset -p 1 | sed 's/.*: //')"

        # Convert to decimal
        init_affinity=$((0x$init_affinity))

        # Make sure variable holds only numbers
        if echo "$init_affinity" | grep -q '^[0-9]\+$'; then

            # Convert to absolute value
            AFFINITY=${AFFINITY#-}

            # Substract the value 
            AFFINITY=$((init_affinity - AFFINITY))

            if [ "$AFFINITY" -ge 1 ]; then
                # Convert to hexadecimal
                AFFINITY=$(printf '%x\n' "$AFFINITY")
            else # Values below 1 are invalid
                echo "Invalid value for CPU affinity: $AFFINITY" >&2
                AFFINITY=
            fi
        else
            echo "Failed to get CPU affinity of the init process (PID 1)" >&2
            AFFINITY=
        fi
    fi

    # Apply priority
    if [ "$can_renice" = true ] && [ -n "$NICE" ]; then
        if renice -n "$NICE" -p $$ > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set niceness to $NICE"
        else
            echo "Failed to set niceness to $NICE" >&2
        fi
    fi

    # Apply IO class and priority
    if [ "$can_ionice" = true ]; then
        if [ -n "$IOCLASS" ]; then
            if ionice -c "$IOCLASS" -p $$ > /dev/null; then
                [ -n "$VERBOSE" ] && echo "Set IO class to $IOCLASS"
            else
                echo "Failed to set IO class to $IOCLASS" >&2
            fi
        fi

        if [ -n "$IOPRIORITY" ]; then
            if ionice -n "$IOPRIORITY" -p $$ > /dev/null; then
                [ -n "$VERBOSE" ] && echo "Set IO priority to $IOPRIORITY"
            else
                echo "Failed to set IO priority to $IOPRIORITY" >&2
            fi
        fi
    fi

    # Apply CPU affinity
    if [ "$can_affinity" = true ] && [ -n "$AFFINITY" ]; then
        if taskset -p "$AFFINITY" $$ > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set CPU affinity to $AFFINITY"
        else
            echo "Failed to set CPU affinity to $AFFINITY" >&2
        fi
    fi

    # Apply file creation mask
    if [ -n "$UMASK" ]; then
        if umask "$UMASK" > /dev/null; then
            [ -n "$VERBOSE" ] && echo "Set umask to $UMASK"
        else
            echo "Failed to set umask to $UMASK" >&2
        fi
    fi
fi

# Make sure CALLER is not empty - fixes empty value in "Started xxx from ." message in syslog
CALLER="$2"
[ -z "$CALLER" ] && CALLER=unknown  

# Override positional arguments and call the original script
set -- "$1" "$CALLER"
#shellcheck disable=SC1090
. "$original"
